Object.defineProperty(exports, "__esModule", {
    value: true
});

var _orderActions = require('../actions/orderActions');

var _nativeBase = require('native-base');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var INITIAL_STATE = [];


var orderReducer = function orderReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
    var action = arguments[1];
    var item = action.item;

    switch (action.type) {
        case _orderActions.ADD_TO_CART:
            _nativeBase.Toast.show({
                text: 'Producto Agregado',
                position: 'bottom',
                duration: 2000
            });
            var nLista = state.filter(function (p) {
                return p.product.id !== action.item.product.id;
            });

            var repetido = state.find(function (p) {
                return p.product.id === action.item.product.id;
            });

            if (repetido !== undefined) {
                repetido.amount += 1;
                return [].concat(_toConsumableArray(nLista), [repetido]);
            }

            return [].concat(_toConsumableArray(state), [action.item]);

        case _orderActions.SUBSTRACT_AMOUNT:
            if (item.amount > 1) {
                item.amount -= 1;
            } else {
                item.amount = 1;
            }

            return [].concat(_toConsumableArray(state.map(function (i) {
                if (i.product.id === action.item.product.id) {
                    return item;
                }
                return i;
            })));

        case _orderActions.ADD_AMOUNT:
            item.amount += 1;
            var itemss = state.map(function (i) {
                if (i.product.id === action.item.product.id) {
                    return item;
                }
                return i;
            });
            return itemss;

        case _orderActions.DELETE_ITEM:
            return [].concat(_toConsumableArray(state.filter(function (i) {
                return i.product.id !== action.item.product.id;
            })));
        default:
            return state;
    }
};

exports.default = orderReducer;